리액트 설치 47p.
	< Node.js >
	1. node.js 설치한다( npm 포함 )
		- https://nodejs.org/en
			- v20 LTS ( 교재 v18 )
		- npm : 외부 라이브러리 들의 버전과 의존성을 관리 하고 편하게 설치 및 삭제 해주는 역할
	2. cmd(명령프롬프트)
		[ 입력후 엔터] node --version
		[확인] v20.11.1
			npm -v
			10.2.4
	< Vscode >

리액트란 무엇인가? p.56
	1. (UI) 웹과 네이티브 사용자 인터페이스를 위한 라이브러리
	2. 라이브러리 : 자주 사용되는 기능을 정리해 모아 놓은것
		- 자주 사용되는 기능 : 함수
		- 프레임워크(프레임워크가 흐름의제어권을 가짐) vs 라이브러리(개발자가 흐름의제어권을 가짐)
			·관계 : 코드 > 함수 > 라이브러리 > 프레임워크
	3. 인기 많은 JS 라이브러리
		1. 앵귤러JS [ 서비스 종료 ]
		2. 리액트 [ 인기많음 , 전자정부프레임워크(공공기관) , 꾸준한 업데이트 ]
			- 리액트( 웹/앱 ) vs 리액트 네이티브( 앱 : 안드로이드/ios ) => 합체 : 리액트 네이티브 웹/앱
		3. 뷰[ 스타트업 , JS 거의 유사해서 난이도 쉬움 ]
	4. SPA : 싱글 페이지 어플레이션 ( Single Page Application )
		- 1. 빠른 업데이트( 렌더링 속도 )
		- 클라이언트 사이드 렌더링 ( 클라이언트(사용자) 가 서버(Spring) 와 상관없이 브라우저에서 자체 화면 변화 )
		-  vs 서버 사이드 렌더링 ( 클라이언트가 서버 에게 화면 변화를 요청 - 머스테치/JSP )
		- 2. HTML 1개
	5. DOM : 문서(HTML) 객체 모델
 		- 본래 HTML은 객체 언어가 아니므로 JS가 HTML 마크업들을 객체화 하는 방법
		- document 객체 ( document.querySelector('선택자') : HTML마크업들을 객체화 호출 )
	6. 컴포넌트
		- 하나의 구성요소 	ex) 레고
			- 구성 : 여러개의 컴포넌트 또는 함수들
		- 함수 == 컴포넌트 == 모듈 ( 모두 같은 의미 )

리액트 설치 p.86
	1. vscode 또는 인텔리제이 터미널 창 열기
	2. npx create-react-app 프로젝트명
		- *오류 발생 : npm uninstall -g create-react-app 입력후 다시 설치
		- 자동 으로 git 파일 생성
	3. 생성된 프로젝트 폴더명을 오른쪽 클릭 -> 터미널 열기
	4. npm start

JSX P.97
	- JS 의 확장문법
	- JS + HTML/XML 결합
		vs JSP : JAVA + HTML 결합
		vs 머스테치 : JAVA(spring model) + HTML 결합
	- 장점
		1. 코드가 간결해진다.
		2. 가독성이 향상된다.
		3. 삽입 공격 해킹를 방어한다.
	- { } : JS의 코드(변수/함수) 작성 
	- 주로 컴포넌트의 return 에서 JSX문법 사용.
	- JSX 주석처리 
		    1. 
			{ 
                // 주석
            }
			2.
            { /* 주석 */ }

JSX 실습 p.107
	- 컴포넌트 만드는 방법
 		1. 첫글자를 대문자하는 .jsx 파일 생성한다.
		2. 함수형컴포넌트 생성
			1. 컴포넌트함수 선언
                function 컴포넌트명( props ){
                        return (<>JSX형식문법</> );
                }
            2. 다른 곳에서 해당 파일 import 시 반환할 컴포넌트명시
                - 해당 파일에 여러개 함수가 존재 할수 있으므로
                export default 해당파일호출시반환컴포넌트명;

            <결합>
            export default function 컴포넌트명( props ){
                return (<>JSX형식문법</> );
            }

    - 컴포넌트를 호출하는 방법 ( 다른 컴포넌트에서 해당 컴포넌트 호출하는 방법 )
		1. 호출할 컴포넌트 파일 상단에서 호출할 컴포넌트의 파일명과 컴포넌트명을 import 한다.
		EX) import 컴포넌트명 from 컴포넌트파일경로;




엘리먼트 이란? p.118
	- 정의 : 리액트 앱의 가장 작은 빌딩 블록들 
	- 엘리먼트 종류 : 1. 본래HTML 엘리먼트(마크업/태그) , 2. 가상 리액트 엘리먼트
	- 가상 리액트 엘리먼트 --render--> 본래HTML 엘리먼트 	순으로 렌더링 합니다.
	- 컴포넌트(JSX문법작성)1개 ---> 엘리먼트1( JS형태 ) ---> 본래HTML 엘리먼트
							  ---> 엘리먼트2( JS형태 ) ---> 본래HTML 엘리먼트
							  ---> 엘리먼트3( JS형태 ) ---> 본래HTML 엘리먼트
	- 불변성 특징을 갖는다. : 변하지 않는 성질 
	- 변경하고 싶을때 : 재렌더링(새로고침)

props 이란 ? p.143
	- 정의 : 컴포넌트에 전달 할(매개변수) 다양한 정보( 속성 key : value )를 담고 있는 자바스크립트 객체 
	- 형태 : 컴포넌트명( props ){ } 


이벤트 처리하기 ? p.254
	- 기존 DOM 방식 
		<button onclick="JS함수()">버튼</button>
	- 리액트 DOM 방식 
		- 다른점 : 1.이벤트 이름이 카멜표기법이다. 2.처리할 함수 그대로 전달한다.
		1. <button onClick={JS함수}>버튼</button>
		2. <button onClick={ () => JS함수() }>버튼</button>
		- 매개변수 전달하는 방법		
		2. <button onClick={ (evnet) => JS함수( 매개변수1 , 매개변수2 , evnet ) }>버튼</button>
			* evnet매개변수 : 어떤 이벤트의 결과물 정보 객체 반환
				- evnet.target : 이벤트가 발생된 마크업
				
	- 이벤트 핸들러 : 어떤 이벤트(click, change 등등)가 발생했을때 해당 이벤트를 처리하는 함수.
	- 이벤트 리스너 : 이벤트가 발생하는것을 계속 듣고 있다는 의미
		.addEventListener('이벤트타입', 실행할함수)


조건부 렌더링 ? p.274
	- 정의 : 어떠한 조건에 따라서 렌더링이 달라지는것 
	- JSX 사용법
	1.
		{
			if( 조건 ){
				<컴포넌트 /> 
			}else {
				<컴포넌트 /> 
			}
		}
	2.
		{ 조건 ? <컴포넌트 /> : <컴포넌트 /> }
	3.
		{ 조건 && <컴포넌트 />  }

	-엘리먼트 변수
		- JS에서 선언 
			let 변수;
			if( 조건 ){ 변수 = <컴포넌트 /> }
			else{ 변수 = <컴포넌트 /> } 
		- JSX 에서 호출 
			{ 변수 }

	- 컴포넌트 렌더링 막기
		- 특정 조건에 따라 return null;
		- if( 조건 ) return null;

state 이란 ? p.184
	1.정의 : 리액트 컴포넌트의 상태??
		- 리액트 컴포넌틔 변경 가능한 데이터
		- 렌더링 이나 데이터 흐름에 사용되는 값만 state에 포함.
	
	2. state는 자바스크립트 객체 
		- state는 직접적인 변경이 불가능 
		- state 변경하고자 할때 setState() 라는 함수를 사용해야 한다.

컴포넌트의 상태 (생명주기) 란 ? p.187
	1. 생명주기 : 컴포넌트가 생성되는 시점부터 사라지는 시점까지의 주기.

	2. 시점
		마운트(출생)		업데이트(인생)								언마운트(사망)
			생성자()		setState() , new props , forceUpdate()
			render			render

	3. *업데이트
		- 컴포넌트 업데이트란 == 재랜더링 == 함수 재호출 

훅 이란 ? p.214
	1. 정의 : 리액트의 state와 생명주기 기능에 갈고리를 걸어 원하는 시점에 정해진 함수를 실행되도록 만든것/함수.
	2. 생김새 : use~~~()

useState() 이란 ? p.215
	1. 정의 : 함수 컴포넌트에서 사용되는 훅 중에서 대표 함수.
	2. 사용법
		1. 라이브러리 import 	: import { useState } from "react";
		2. 호출 				: useState('초기값');
		3. 반환					: 배열
			- 배열 : state 와 state 수정함수.
			[0] : state 초기값 또는 값 
			[1] : setState 함수 
				- state 수정할수 있는함수
				- 1. 호출시 해당 컴포넌트 렌더링
				- 2. 수정 기준 : 주소값(주로:객체/배열) , 원시타입
				- 3. 이벤트 핸들러 매개변수( prev~~~ )	: 기존 값 호출 
					setState( (prev~~~) =>  );
